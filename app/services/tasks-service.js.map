{"version":3,"file":"tasks-service.js","sourceRoot":"","sources":["tasks-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport { ITask, Task, ITaskResponse } from '../tasks-list/task';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject'\n\n@Injectable()\nexport class TasksService {\n\tprivate static get APPLICATION_ID(): string { return '72ea962f-5ac0-11e6-9168-0a5449992ecf'; }\n\n\tprivate static get TASKS_API_URL(): string { return 'http://homework.avantlink.com/tasks' }\n\n\tprivate _tasksSource: Subject<ITask[]> = new Subject<ITask[]>();\n\tprivate _tasks: ITask[];\n\n\ttasks$ = this._tasksSource.asObservable();\n\n\tconstructor(private http: Http) {\n\t\tthis._tasks = [];\n\t\tthis.loadTasks();\n\t}\n\n\t/***********************\n\t * Public API\n\t ***********************/\n\n\tpublic addTask(name: string): void {\n\t\tthis.http.post(TasksService.TASKS_API_URL, { 'name': name }, { headers: this.getJsonHeader() })\n\t\t\t.subscribe(this.addTaskSuccess.bind(this), this.taskHttpError.bind(this), this.updateObservables.bind(this));\n\t}\n\n\tpublic updateTask(newName: string, id: number): void {\n\t\tthis.http.put(TasksService.TASKS_API_URL+'?id='+id, { 'name': newName }, { headers: this.getDefaultHeader() })\n\t\t\t.subscribe(this.updateTaskSuccess.bind(this), this.taskHttpError.bind(this), this.updateObservables.bind(this));\n\t}\n\n\tpublic deleteTask(task: ITask): void {\n\t\tthis.http.delete(TasksService.TASKS_API_URL+'?id='+task.id, { headers: this.getDefaultHeader() })\n\t\t.subscribe(this.deleteTaskSuccess.bind(this), this.taskHttpError.bind(this), this.updateObservables.bind(this));\n\t}\n\n\tprivate loadTasks(): void {\n\t\tthis._tasks = [];\n\t\tthis.http.get(TasksService.TASKS_API_URL, { headers: this.getDefaultHeader() })\n\t\t.subscribe(this.tasksLoadSuccess.bind(this), this.taskHttpError.bind(this), this.updateObservables.bind(this));\n\t}\n\n\n\t/*****************************\n\t * HTTP Response handlers\n\t ****************************/\n\tprivate addTaskSuccess(response: Response): void {\n\t\tif(response && response.json().success) {\n\t\t\tlet task:ITaskResponse = response.json().data;\n\t\t\tthis._tasks.push(new Task(task.task_name, task.task_id));\n\t\t} else {\n\t\t\tconsole.log('Request unsuccessful');\n\t\t}\n\t}\n\n\tprivate deleteTaskSuccess(response: Response): void {\n\t\tif(response && response.json().success) {\n\t\t\tlet task:ITaskResponse = response.json().data;\n\t\t\tfor (let i:number = 0; i < this._tasks.length; i++) {\n\t\t\t\tif (task.task_id == this._tasks[i].id) {\n\t\t\t\t\tthis._tasks.splice(i, 1);\n\t\t\t\t\treturn;//exit loop once we found the task to be deleted\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log('Request unsuccessful');\n\t\t}\n\t}\n\n\tprivate tasksLoadSuccess(response: Response): void {\n\t\tif(response && response.json().success) {\n\t\t\tlet tasksResponse:ITaskResponse[] = response.json().data;\n\t\t\t//Transform server response to front-end ITask object\n\t\t\tfor (let i:number = 0; i < tasksResponse.length; i++) {\n\t\t\t\tthis._tasks.push({name: tasksResponse[i].task_name, id: tasksResponse[i].task_id});\n\t\t\t}\n\t\t\tthis._tasksSource.next(this._tasks);\n\t\t} else {\n\t\t\tconsole.log('Request unsuccessful');\n\t\t}\n\t}\n\n\tprivate taskHttpError(error: any): void {\n\t\tconsole.log(error);\n\t}\n\n\tprivate updateTaskSuccess(response: Response): void {\n\t\tif(response && response.json().success) {\n\t\t\tlet task:ITaskResponse = response.json().data;\n\t\t\tfor(let i: number = 0; i < this._tasks.length; i++) {\n\t\t\t\tif(task.task_id == this._tasks[i].id) {\n\t\t\t\t\tthis._tasks[i].name = task.task_name;\n\t\t\t\t\treturn; //exit loop once we found the task to be updated\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/*****************************\n\t * Helper methods\n\t ****************************/\n\t//This creates a header that includes the Application ID on it\n\tprivate getDefaultHeader(): Headers {\n\t\tlet headers: Headers = new Headers();\n\t\theaders.append('Application-ID', TasksService.APPLICATION_ID);\n\t\treturn headers;\n\t}\n\n\tprivate getJsonHeader(): Headers {\n\t\tlet headers: Headers = this.getDefaultHeader();\n\t\theaders.append('Content-Type', 'application/json');\n\t\treturn headers;\n\t}\n\n\t//Whenever the _tasks object changes\n\t//we need to let all of it's listeners know so they can update.\n\tprivate updateObservables(): void {\n\t\tthis._tasksSource.next(this._tasks);\n\t}\n}\n"]}